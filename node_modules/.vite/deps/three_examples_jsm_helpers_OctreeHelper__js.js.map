{
  "version": 3,
  "sources": ["../../three/examples/jsm/helpers/OctreeHelper.js"],
  "sourcesContent": ["import {\n\tLineSegments,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tLineBasicMaterial\n} from 'three';\n\n/**\n * A helper for visualizing an Octree.\n *\n * ```js\n * const helper = new OctreeHelper( octree );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n * @three_import import { OctreeHelper } from 'three/addons/helpers/OctreeHelper.js';\n */\nclass OctreeHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new Octree helper.\n\t *\n\t * @param {Octree} octree - The octree to visualize.\n\t * @param {number|Color|string} [color=0xffff00] - The helper's color.\n\t */\n\tconstructor( octree, color = 0xffff00 ) {\n\n\t\tsuper( new BufferGeometry(), new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The octree to visualize.\n\t\t *\n\t\t * @type {Octree}\n\t\t */\n\t\tthis.octree = octree;\n\n\t\t/**\n\t\t * The helper's color.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'OctreeHelper';\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Updates the helper. This method must be called whenever the Octree's\n\t * structure is changed.\n\t */\n\tupdate() {\n\n\t\tconst vertices = [];\n\n\t\tfunction traverse( tree ) {\n\n\t\t\tfor ( let i = 0; i < tree.length; i ++ ) {\n\n\t\t\t\tconst min = tree[ i ].box.min;\n\t\t\t\tconst max = tree[ i ].box.max;\n\n\t\t\t\tvertices.push( max.x, max.y, max.z ); vertices.push( min.x, max.y, max.z ); // 0, 1\n\t\t\t\tvertices.push( min.x, max.y, max.z ); vertices.push( min.x, min.y, max.z ); // 1, 2\n\t\t\t\tvertices.push( min.x, min.y, max.z ); vertices.push( max.x, min.y, max.z ); // 2, 3\n\t\t\t\tvertices.push( max.x, min.y, max.z ); vertices.push( max.x, max.y, max.z ); // 3, 0\n\n\t\t\t\tvertices.push( max.x, max.y, min.z ); vertices.push( min.x, max.y, min.z ); // 4, 5\n\t\t\t\tvertices.push( min.x, max.y, min.z ); vertices.push( min.x, min.y, min.z ); // 5, 6\n\t\t\t\tvertices.push( min.x, min.y, min.z ); vertices.push( max.x, min.y, min.z ); // 6, 7\n\t\t\t\tvertices.push( max.x, min.y, min.z ); vertices.push( max.x, max.y, min.z ); // 7, 4\n\n\t\t\t\tvertices.push( max.x, max.y, max.z ); vertices.push( max.x, max.y, min.z ); // 0, 4\n\t\t\t\tvertices.push( min.x, max.y, max.z ); vertices.push( min.x, max.y, min.z ); // 1, 5\n\t\t\t\tvertices.push( min.x, min.y, max.z ); vertices.push( min.x, min.y, min.z ); // 2, 6\n\t\t\t\tvertices.push( max.x, min.y, max.z ); vertices.push( max.x, min.y, min.z ); // 3, 7\n\n\t\t\t\ttraverse( tree[ i ].subTrees );\n\n\t\t\t}\n\n\t\t}\n\n\t\ttraverse( this.octree.subTrees );\n\n\t\tthis.geometry.dispose();\n\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nexport { OctreeHelper };\n"],
  "mappings": ";;;;;;;;AAkBA,IAAM,eAAN,cAA2B,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQvC,YAAa,QAAQ,QAAQ,UAAW;AAEvC,UAAO,IAAI,eAAe,GAAG,IAAI,kBAAmB,EAAE,OAAc,YAAY,MAAM,CAAE,CAAE;AAO1F,SAAK,SAAS;AAOd,SAAK,QAAQ;AAEb,SAAK,OAAO;AAEZ,SAAK,OAAO;AAAA,EAEb;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS;AAER,UAAM,WAAW,CAAC;AAElB,aAAS,SAAU,MAAO;AAEzB,eAAU,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAO;AAExC,cAAM,MAAM,KAAM,CAAE,EAAE,IAAI;AAC1B,cAAM,MAAM,KAAM,CAAE,EAAE,IAAI;AAE1B,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAEzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAEzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AACzE,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAG,iBAAS,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAEzE,iBAAU,KAAM,CAAE,EAAE,QAAS;AAAA,MAE9B;AAAA,IAED;AAEA,aAAU,KAAK,OAAO,QAAS;AAE/B,SAAK,SAAS,QAAQ;AAEtB,SAAK,WAAW,IAAI,eAAe;AACnC,SAAK,SAAS,aAAc,YAAY,IAAI,uBAAwB,UAAU,CAAE,CAAE;AAAA,EAEnF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU;AAET,SAAK,SAAS,QAAQ;AACtB,SAAK,SAAS,QAAQ;AAAA,EAEvB;AAED;",
  "names": []
}
